/* ----------------------------------- */
/*                                     */
/*  This JavaScript Code developed     */
/*  by Oleg Gribanov & ChatGPT :: 2023 */
/*                                     */
/* ----------------------------------- */

let xp = 0; /* üá¶üá∫ This code contains both variable declaration and definition. The game starts with zero experience.
üá∑üá∫ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é xp –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –µ–π –∑–Ω–∞—á–µ–Ω–∏–µ 0. –≠—Ç–æ—Ç –∫–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–∞–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, —Ç–∞–∫ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π. –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –Ω—É–ª–µ–≤—ã–º –æ–ø—ã—Ç–æ–º. */
let health = 100; /* üá¶üá∫ This code contains both variable declaration and definition. The game starts with health equal to one hundred points. 
üá∑üá∫ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é health –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –µ–π –∑–Ω–∞—á–µ–Ω–∏–µ 100. –≠—Ç–æ—Ç –∫–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–∞–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, —Ç–∞–∫ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π. –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∑–¥–æ—Ä–æ–≤—å–µ–º —Ä–∞–≤–Ω—ã–º —Å—Ç–∞ –±–∞–ª–ª–∞–º (–æ—á–∫–∞–º). */
let gold = 50; /* üá¶üá∫ This code contains both variable declaration and definition. The game starts with a gold reserve equal to one hundred. 
üá∑üá∫ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é gold –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –µ–π –∑–Ω–∞—á–µ–Ω–∏–µ 50. –≠—Ç–æ—Ç –∫–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–∞–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, —Ç–∞–∫ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π. –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∑–∞–ø–∞—Å–æ–º –∑–æ–ª–æ—Ç–∞ —Ä–∞–≤–Ω—ã–º —Å—Ç–∞. */
let currentWeapon = 0; /* üá¶üá∫ This code contains both variable declaration and definition. The game starts with the player having nothing in their arsenal yet.
üá∑üá∫ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é currentWeapon –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –µ–π –∑–Ω–∞—á–µ–Ω–∏–µ 0. –≠—Ç–æ—Ç –∫–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–∞–∫ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ, —Ç–∞–∫ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π. –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ç–æ–≥–æ, —á—Ç–æ –≤ –∞—Ä—Å–µ–Ω–∞–ª–µ –∏–≥—Ä–æ–∫–∞ –ø–æ–∫–∞ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç. */
let fighting; /* üá¶üá∫ Here is just a variable declaration. When declaring a variable without assigning a value to it, its default value will be undefined.
üá∑üá∫ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é fighting, –Ω–æ –Ω–µ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –µ–π –∑–Ω–∞—á–µ–Ω–∏–µ. –ó–¥–µ—Å—å –∏–¥–µ—Ç —Ç–æ–ª—å–∫–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π. –ü—Ä–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –±–µ–∑ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –µ–π, –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –±—É–¥–µ—Ç undefined. */
let monsterHealth; /* üá¶üá∫ Here is just a variable declaration. When declaring a variable without assigning a value to it, its default value will be undefined.
üá∑üá∫ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é monsterHealth, –Ω–æ –Ω–µ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –µ–π –∑–Ω–∞—á–µ–Ω–∏–µ. –ó–¥–µ—Å—å –∏–¥–µ—Ç —Ç–æ–ª—å–∫–æ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π. –ü—Ä–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –±–µ–∑ –ø—Ä–∏—Å–≤–æ–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è –µ–π, –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –±—É–¥–µ—Ç undefined. */
let inventory = [
  "stick",
]; /* üá¶üá∫ We define the variable inventory and assign it an array with a single element "stick". Here we have both the definition of the variable and its initialization with the value of the array ["stick"]. The game starts with the player having a stick in their inventory.
üá∑üá∫ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é inventory –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –µ–π –º–∞—Å—Å–∏–≤ —Å –æ–¥–Ω–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º "stick". –ó–¥–µ—Å—å –∏–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏ –µ—ë –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏–µ–º –º–∞—Å—Å–∏–≤–∞ ["stick"]. –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ç–æ–≥–æ, —á—Ç–æ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ –∏–≥—Ä–æ–∫–∞ –µ—Å—Ç—å –ø–∞–ª–∫–∞. */

const button1 =
  document.querySelector(
    "#button1"
  ); /* üá¶üá∫ Define a constant button1 and assign it the button element with an id of "button1". That is, a constant named button1 is created here that will reference the HTML element with an identifier of "button1".
üá∑üá∫ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É button1 –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –µ–π —ç–ª–µ–º–µ–Ω—Ç –∫–Ω–æ–ø–∫–∏ —Å id = "button1". –¢–æ –µ—Å—Ç—å, –∑–¥–µ—Å—å —Å–æ–∑–¥–∞—ë—Ç—Å—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ button1, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Å—Å—ã–ª–∞—Ç—å—Å—è –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç HTML-–¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º "button1". */
const button2 =
  document.querySelector(
    "#button2"
  ); /* üá¶üá∫ Define a constant button2 and assign it the button element with an id of "button2". That is, a constant named button2 is created here that will reference the HTML element with an identifier of "button2".
üá∑üá∫ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É button2 –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –µ–π —ç–ª–µ–º–µ–Ω—Ç –∫–Ω–æ–ø–∫–∏ —Å id = "button2". –¢–æ –µ—Å—Ç—å, –∑–¥–µ—Å—å —Å–æ–∑–¥–∞—ë—Ç—Å—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ button2, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Å—Å—ã–ª–∞—Ç—å—Å—è –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç HTML-–¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º "button2". */
const button3 =
  document.querySelector(
    "#button3"
  ); /* üá¶üá∫ Define a constant button3 and assign it the button element with an id of "button3". That is, a constant named button2 is created here that will reference the HTML element with an identifier of "button3".
üá∑üá∫ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É button3 –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –µ–π —ç–ª–µ–º–µ–Ω—Ç –∫–Ω–æ–ø–∫–∏ —Å id = "button3". –¢–æ –µ—Å—Ç—å, –∑–¥–µ—Å—å —Å–æ–∑–¥–∞—ë—Ç—Å—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ button3, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç —Å—Å—ã–ª–∞—Ç—å—Å—è –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç HTML-–¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º "button3". */

const text =
  document.querySelector(
    "#text"
  ); /* üá¶üá∫ This line of code declares a constant variable text and assigns it an HTML element that matches the CSS selector #text. This is done using the querySelector() method of the document object, which allows you to find the first element that matches the specified selector. It can be inferred that there is an element with id="text" on the web page, and this code allows you to get a reference to it.
üá∑üá∫ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É text –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –µ–π —ç–ª–µ–º–µ–Ω—Ç —Å id = "text". –¢–æ –µ—Å—Ç—å, –Ω–∞ –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –∫–æ–¥–∞ –æ–±—ä—è–≤–ª—è–µ—Ç—Å—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ text –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç—Å—è –µ–π HTML-—ç–ª–µ–º–µ–Ω—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π CSS-—Å–µ–ª–µ–∫—Ç–æ—Ä—É #text. –î–ª—è —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–µ—Ç–æ–¥ querySelector() –æ–±—ä–µ–∫—Ç–∞ document, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞–π—Ç–∏ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏–π —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Å–µ–ª–µ–∫—Ç–æ—Ä—É. –ù–∞ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç —Å id="text", –∏ –¥–∞–Ω–Ω—ã–π –∫–æ–¥ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–µ–≥–æ. */
const xpText =
  document.querySelector(
    "#xpText"
  ); /* üá¶üá∫ This line of code declares a constant variable xpText and assigns it an HTML element that matches the CSS selector #xpText. This is done using the querySelector() method of the document object, which allows you to find the first element that matches the specified selector. It can be inferred that there is an element with id="xpText" on the web page, and this code allows you to get a reference to it.
üá∑üá∫ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É xpText –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –µ–π —ç–ª–µ–º–µ–Ω—Ç —Å id = "xpText". –¢–æ –µ—Å—Ç—å, –Ω–∞ –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –∫–æ–¥–∞ –æ–±—ä—è–≤–ª—è–µ—Ç—Å—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ xpText –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç—Å—è –µ–π HTML-—ç–ª–µ–º–µ–Ω—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π CSS-—Å–µ–ª–µ–∫—Ç–æ—Ä—É #xpText. –î–ª—è —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–µ—Ç–æ–¥ querySelector() –æ–±—ä–µ–∫—Ç–∞ document, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞–π—Ç–∏ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏–π —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Å–µ–ª–µ–∫—Ç–æ—Ä—É. –ù–∞ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç —Å id="xpText", –∏ –¥–∞–Ω–Ω—ã–π –∫–æ–¥ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–µ–≥–æ. */
const healthText =
  document.querySelector(
    "#healthText"
  ); /* üá¶üá∫ This line of code declares a constant variable healthText and assigns it an HTML element that matches the CSS selector #healthText. This is done using the querySelector() method of the document object, which allows you to find the first element that matches the specified selector. It can be inferred that there is an element with id="healthText" on the web page, and this code allows you to get a reference to it.
üá∑üá∫ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É healthText –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –µ–π —ç–ª–µ–º–µ–Ω—Ç —Å id = "healthText". –¢–æ –µ—Å—Ç—å, –Ω–∞ –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –∫–æ–¥–∞ –æ–±—ä—è–≤–ª—è–µ—Ç—Å—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ healthText –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç—Å—è –µ–π HTML-—ç–ª–µ–º–µ–Ω—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π CSS-—Å–µ–ª–µ–∫—Ç–æ—Ä—É #healthText. –î–ª—è —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–µ—Ç–æ–¥ querySelector() –æ–±—ä–µ–∫—Ç–∞ document, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞–π—Ç–∏ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏–π —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Å–µ–ª–µ–∫—Ç–æ—Ä—É. –ù–∞ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç —Å id="healthText", –∏ –¥–∞–Ω–Ω—ã–π –∫–æ–¥ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–µ–≥–æ. */
const goldText =
  document.querySelector(
    "#goldText"
  ); /* üá¶üá∫ This line of code declares a constant variable goldText and assigns it an HTML element that matches the CSS selector #goldText. This is done using the querySelector() method of the document object, which allows you to find the first element that matches the specified selector. It can be inferred that there is an element with id="goldText" on the web page, and this code allows you to get a reference to it.
üá∑üá∫ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É goldText –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –µ–π —ç–ª–µ–º–µ–Ω—Ç —Å id = "goldText". –¢–æ –µ—Å—Ç—å, –Ω–∞ –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –∫–æ–¥–∞ –æ–±—ä—è–≤–ª—è–µ—Ç—Å—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ goldText –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç—Å—è –µ–π HTML-—ç–ª–µ–º–µ–Ω—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π CSS-—Å–µ–ª–µ–∫—Ç–æ—Ä—É #goldText. –î–ª—è —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–µ—Ç–æ–¥ querySelector() –æ–±—ä–µ–∫—Ç–∞ document, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞–π—Ç–∏ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏–π —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Å–µ–ª–µ–∫—Ç–æ—Ä—É. –ù–∞ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç —Å id="goldText", –∏ –¥–∞–Ω–Ω—ã–π –∫–æ–¥ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–µ–≥–æ. */
const monsterStats = document.querySelector("#monsterStats"); // üá¶üá∫ This line of code declares a constant variable monsterStats and assigns it an HTML element that matches the CSS selector #monsterStats. This is done using the querySelector() method of the document object, which allows you to find the first element that matches the specified selector. It can be inferred that there is an element with id="monsterStats" on the web page, and this code allows you to get a reference to it.
// üá∑üá∫ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É monsterStats –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –µ–π —ç–ª–µ–º–µ–Ω—Ç —Å id = "monsterStats". –¢–æ –µ—Å—Ç—å, –Ω–∞ –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –∫–æ–¥–∞ –æ–±—ä—è–≤–ª—è–µ—Ç—Å—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ monsterStats –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç—Å—è –µ–π HTML-—ç–ª–µ–º–µ–Ω—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π CSS-—Å–µ–ª–µ–∫—Ç–æ—Ä—É #monsterStats. –î–ª—è —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–µ—Ç–æ–¥ querySelector() –æ–±—ä–µ–∫—Ç–∞ document, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞–π—Ç–∏ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏–π —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Å–µ–ª–µ–∫—Ç–æ—Ä—É. –ù–∞ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç —Å id="monsterStats", –∏ –¥–∞–Ω–Ω—ã–π –∫–æ–¥ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–µ–≥–æ.
const monsterNameText = document.querySelector("#monsterName"); // üá¶üá∫ This line of code declares a constant variable monsterName and assigns it an HTML element that matches the CSS selector #monsterName. This is done using the querySelector() method of the document object, which allows you to find the first element that matches the specified selector. It can be inferred that there is an element with id="monsterName" on the web page, and this code allows you to get a reference to it.
// üá∑üá∫ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É monsterName –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –µ–π —ç–ª–µ–º–µ–Ω—Ç —Å id = "monsterName". –¢–æ –µ—Å—Ç—å, –Ω–∞ –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –∫–æ–¥–∞ –æ–±—ä—è–≤–ª—è–µ—Ç—Å—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ monsterName –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç—Å—è –µ–π HTML-—ç–ª–µ–º–µ–Ω—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π CSS-—Å–µ–ª–µ–∫—Ç–æ—Ä—É #monsterName. –î–ª—è —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–µ—Ç–æ–¥ querySelector() –æ–±—ä–µ–∫—Ç–∞ document, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞–π—Ç–∏ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏–π —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Å–µ–ª–µ–∫—Ç–æ—Ä—É. –ù–∞ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç —Å id="monsterName", –∏ –¥–∞–Ω–Ω—ã–π –∫–æ–¥ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–µ–≥–æ.
const monsterHealthText = document.querySelector("#monsterHealth"); // üá¶üá∫ This line of code declares a constant variable monsterHealth and assigns it an HTML element that matches the CSS selector #monsterHealth. This is done using the querySelector() method of the document object, which allows you to find the first element that matches the specified selector. It can be inferred that there is an element with id="monsterHealth" on the web page, and this code allows you to get a reference to it.
// üá∑üá∫ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É monsterHealth –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –µ–π —ç–ª–µ–º–µ–Ω—Ç —Å id = "monsterHealth". –¢–æ –µ—Å—Ç—å, –Ω–∞ –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ –∫–æ–¥–∞ –æ–±—ä—è–≤–ª—è–µ—Ç—Å—è –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∞ monsterHealth –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ—Ç—Å—è –µ–π HTML-—ç–ª–µ–º–µ–Ω—Ç, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π CSS-—Å–µ–ª–µ–∫—Ç–æ—Ä—É #monsterHealth. –î–ª—è —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–µ—Ç–æ–¥ querySelector() –æ–±—ä–µ–∫—Ç–∞ document, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∑–≤–æ–ª—è–µ—Ç –Ω–∞–π—Ç–∏ –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç, —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä—è—é—â–∏–π —É–∫–∞–∑–∞–Ω–Ω–æ–º—É —Å–µ–ª–µ–∫—Ç–æ—Ä—É. –ù–∞ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç —ç–ª–µ–º–µ–Ω—Ç —Å id="monsterHealth", –∏ –¥–∞–Ω–Ω—ã–π –∫–æ–¥ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –Ω–µ–≥–æ.

const weapons = [
  // üá¶üá∫ This code creates an array called weapons, which contains objects that describe weapons and their properties (name and power). Each object has two properties: name and power.
  // üá∑üá∫ –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞—Å—Å–∏–≤ weapons. –¢–æ –µ—Å—Ç—å, –∑–¥–µ—Å—å —Å–æ–∑–¥–∞—ë—Ç—Å—è –º–∞—Å—Å–∏–≤ weapons, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –æ–±—ä–µ–∫—Ç—ã, –∫–∞–∂–¥—ã–π –∏–∑ –∫–æ—Ç–æ—Ä—ã—Ö –æ–ø–∏—Å—ã–≤–∞–µ—Ç –æ—Ä—É–∂–∏–µ –∏ –µ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞ (–Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Å–∏–ª–∞). –ö–∞–∂–¥—ã–π –æ–±—ä–µ–∫—Ç –±—É–¥–µ—Ç –∏–º–µ—Ç—å 2 —Å–≤–æ–π—Å—Ç–≤–∞: name –∏ power.
  {
    name: "stick", // üá¶üá∫ Defining the name property of the first object in the weapons array and assigning it a value of "stick".
    // üá∑üá∫ –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–≤–æ–π—Å—Ç–≤–æ name –ø–µ—Ä–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –º–∞—Å—Å–∏–≤–∞ weapons –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –µ–º—É –∑–Ω–∞—á–µ–Ω–∏–µ "stick".
    power: 5, // üá¶üá∫ This code represents an object that contains two properties: "name" and "power". The "name" property has a value of "stick", and the "power" property has a value of 5. This can be interpreted as defining a weapon with the name "stick" and an attack power of 5.
    // üá∑üá∫ –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–≤–æ–π—Å—Ç–≤–æ power –ø–µ—Ä–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –º–∞—Å—Å–∏–≤–∞ weapons –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –µ–º—É –∑–Ω–∞—á–µ–Ω–∏–µ 5. –¢–æ –µ—Å—Ç—å, –¥–∞–Ω–Ω–∞—è —á–∞—Å—Ç—å –∫–æ–¥–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π –æ–±—ä–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–≤–∞ —Å–≤–æ–π—Å—Ç–≤–∞: "name" –∏ "power". –°–≤–æ–π—Å—Ç–≤–æ "name" –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ "stick", –∞ —Å–≤–æ–π—Å—Ç–≤–æ "power" –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ 5. –≠—Ç–æ –º–æ–∂–Ω–æ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ä—É–∂–∏—è —Å –∏–º–µ–Ω–µ–º "stick" –∏ —Å–∏–ª–æ–π –∞—Ç–∞–∫–∏ —Ä–∞–≤–Ω–æ–π 5.
  },
  {
    name: "dagger", // üá¶üá∫ Defining the name property of the 2nd object in the weapons array and assigning it a value of "dagger".
    // üá∑üá∫ –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–≤–æ–π—Å—Ç–≤–æ name –≤—Ç–æ—Ä–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –º–∞—Å—Å–∏–≤–∞ weapons –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –µ–º—É –∑–Ω–∞—á–µ–Ω–∏–µ "dagger". Dagger - —ç—Ç–æ –∫–∏–Ω–∂–∞–ª.
    power: 30, // üá¶üá∫ Defining a weapon with an attack power of 30.
    // üá∑üá∫ –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–≤–æ–π—Å—Ç–≤–æ power –≤—Ç–æ—Ä–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –º–∞—Å—Å–∏–≤–∞ weapons –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –µ–º—É –∑–Ω–∞—á–µ–Ω–∏–µ 30. –¢–æ –µ—Å—Ç—å, —Å–≤–æ–π—Å—Ç–≤–æ "name" –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ "dagger", –∞ —Å–≤–æ–π—Å—Ç–≤–æ "power" –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ 30. –≠—Ç–æ –º–æ–∂–Ω–æ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ä—É–∂–∏—è —Å –∏–º–µ–Ω–µ–º "dagger" –∏ —Å–∏–ª–æ–π –∞—Ç–∞–∫–∏ —Ä–∞–≤–Ω–æ–π 30.
  },
  {
    name: "claw hammer", // üá¶üá∫ Defining the name property of the 3rd object in the weapons array and assigning it a value of "claw hammer".
    // üá∑üá∫ –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–≤–æ–π—Å—Ç–≤–æ name –≤—Ç–æ—Ä–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –º–∞—Å—Å–∏–≤–∞ weapons –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –µ–º—É –∑–Ω–∞—á–µ–Ω–∏–µ "claw hammer". Claw hammer - —ç—Ç–æ –º–æ–ª–æ—Ç–æ–∫-–≥–≤–æ–∑–¥–æ–¥–µ—Ä.
    power: 50, // üá¶üá∫ Defining a weapon with an attack power of 50.
    // üá∑üá∫ –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–≤–æ–π—Å—Ç–≤–æ power 3–≥–æ –æ–±—ä–µ–∫—Ç–∞ –º–∞—Å—Å–∏–≤–∞ weapons –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –µ–º—É –∑–Ω–∞—á–µ–Ω–∏–µ 50. –¢–æ –µ—Å—Ç—å, —Å–≤–æ–π—Å—Ç–≤–æ "name" –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ "claw hammer", –∞ —Å–≤–æ–π—Å—Ç–≤–æ "power" –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ 50. –≠—Ç–æ –º–æ–∂–Ω–æ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ä—É–∂–∏—è —Å –∏–º–µ–Ω–µ–º "claw hammer" –∏ —Å–∏–ª–æ–π –∞—Ç–∞–∫–∏ —Ä–∞–≤–Ω–æ–π 50.
  },
  {
    name: "sword", // üá¶üá∫ Defining the name property of the 4th object in the weapons array and assigning it a value of "sword".
    // üá∑üá∫ –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–≤–æ–π—Å—Ç–≤–æ name –≤—Ç–æ—Ä–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –º–∞—Å—Å–∏–≤–∞ weapons –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –µ–º—É –∑–Ω–∞—á–µ–Ω–∏–µ "sword". Sword - —ç—Ç–æ –º–µ—á.
    power: 100, // üá¶üá∫ Defining  a weapon with an attack power of 100.
    // üá∑üá∫ –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–≤–æ–π—Å—Ç–≤–æ power 4–≥–æ –æ–±—ä–µ–∫—Ç–∞ –º–∞—Å—Å–∏–≤–∞ weapons –∏ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –µ–º—É –∑–Ω–∞—á–µ–Ω–∏–µ 100. –¢–æ –µ—Å—Ç—å, —Å–≤–æ–π—Å—Ç–≤–æ "name" –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ "sword", –∞ —Å–≤–æ–π—Å—Ç–≤–æ "power" –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ 100. –≠—Ç–æ –º–æ–∂–Ω–æ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ä—É–∂–∏—è —Å –∏–º–µ–Ω–µ–º "sword" –∏ —Å–∏–ª–æ–π –∞—Ç–∞–∫–∏ —Ä–∞–≤–Ω–æ–π 100.
  },
];

// üá¶üá∫ Define the different monsters that the player can encounter, each with a name, level, and health.
const monsters = [
  {
    name: "slime",
    level: 2,
    health: 15,
  },
  {
    name: "fanged beast",
    level: 8,
    health: 60,
  },
  {
    name: "Zomby",
    level: 20,
    health: 300,
  },
];

// üá¶üá∫ Define the different locations in the game, each with a name, text to display, and buttons with text and functions.
const locations = [
  {
    name: "town square",
    "button text": ["Go to store", "Go to cave", "Fight Zomby"],
    "button functions": [goStore, goCave, fightDragon],
    text: 'You are in the town square. You see a sign that says "Store."',
  },
  {
    name: "store",
    "button text": [
      "Buy 10 health (10 gold)",
      "Buy weapon (30 gold)",
      "Go to town square",
    ],
    "button functions": [buyHealth, buyWeapon, goTown],
    text: "You enter the store.",
  },
  {
    name: "cave",
    "button text": ["Fight slime", "Fight fanged beast", "Go to town square"],
    "button functions": [fightSlime, fightBeast, goTown],
    text: "You enter the cave. You see some monsters.",
  },
  {
    name: "fight",
    "button text": ["Attack", "Dodge", "Run"],
    "button functions": [attack, dodge, goTown],
    text: "You are fighting a monster.",
  },
  {
    name: "kill monster",
    "button text": [
      "Go to town square",
      "Go to town square",
      "Go to town square",
    ],
    "button functions": [goTown, goTown, easterEgg],
    text: 'The monster screams "Arg!" as it dies. You gain experience points and find gold.',
  },
  {
    name: "lose",
    "button text": ["REPLAY?", "REPLAY?", "REPLAY?"],
    "button functions": [restart, restart, restart],
    text: "You die. ‚ò†Ô∏è",
  },
  {
    name: "win",
    "button text": ["REPLAY?", "REPLAY?", "REPLAY?"],
    "button functions": [restart, restart, restart],
    text: "You defeat the Zomby! YOU WIN THE GAME! üéâ",
  },
  {
    name: "easter egg",
    "button text": ["2", "8", "Go to town square?"],
    "button functions": [pickTwo, pickEight, goTown],
    text: "You find a secret game. Pick a number above. Ten numbers will be randomly chosen between 0 and 10. If the number you choose matches one of the random numbers, you win!",
  },
];

// üá¶üá∫ Initialize buttons
button1.onclick = goStore;
button2.onclick = goCave;
button3.onclick = fightDragon;

function update(location) {
  /* üá¶üá∫ Iit is a generic function. The function takes a single parameter location, which is an object containing various properties like button text, button functions, and text. The function updates the text and functions of three buttons and a text block based on the values specified in the location object. The function is not specific to any particular task or application, and can be used in a generic way to update buttons and text based on the properties of an object passed as a parameter.
  üá∑üá∫ –≠—Ç–æ –æ–±–æ–±—â—ë–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è. –û–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä location, –∫–æ—Ç–æ—Ä—ã–π —è–≤–ª—è–µ—Ç—Å—è –æ–±—ä–µ–∫—Ç–æ–º, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞, —Ç–∞–∫–∏–µ –∫–∞–∫ —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏, —Ñ—É–Ω–∫—Ü–∏–∏ –∫–Ω–æ–ø–æ–∫ –∏ —Ç–µ–∫—Å—Ç. –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –∏ —Ñ—É–Ω–∫—Ü–∏–∏ —Ç—Ä—ë—Ö –∫–Ω–æ–ø–æ–∫ –∏ –±–ª–æ–∫–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–Ω–∞—á–µ–Ω–∏–π, —É–∫–∞–∑–∞–Ω–Ω—ã—Ö –≤ –æ–±—ä–µ–∫—Ç–µ location. –§—É–Ω–∫—Ü–∏—è –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ –∫–∞–∫–æ–π-–ª–∏–±–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–¥–∞—á–µ –∏–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é –∏ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –æ–±–æ–±—â—ë–Ω–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–Ω–æ–ø–æ–∫ –∏ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–≤–æ–π—Å—Ç–≤ –æ–±—ä–µ–∫—Ç–∞, –ø–µ—Ä–µ–¥–∞–Ω–Ω–æ–≥–æ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞. */
  monsterStats.style.display = "none"; /* üá¶üá∫ Hide monster information panel.
  üá∑üá∫ –°–∫—Ä—ã—Ç—å –ø–∞–Ω–µ–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–æ–Ω—Å—Ç—Ä–µ. */
  button1.innerText =
    location[
      "button text"
    ][0]; /* üá¶üá∫ Change the text on the first button to the text specified in the location object.
  üá∑üá∫ –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –ø–µ—Ä–≤–æ–π –∫–Ω–æ–ø–∫–µ –Ω–∞ —Ç–µ–∫—Å—Ç, —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤ –æ–±—ä–µ–∫—Ç–µ location. */
  button2.innerText =
    location[
      "button text"
    ][1]; /* üá¶üá∫ Change the text on the 2nd button to the text specified in the location object.
  üá∑üá∫ –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ –≤—Ç–æ—Ä–æ–π –∫–Ω–æ–ø–∫–µ –Ω–∞ —Ç–µ–∫—Å—Ç, —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤ –æ–±—ä–µ–∫—Ç–µ location. */
  button3.innerText =
    location[
      "button text"
    ][2]; /* üá¶üá∫ Change the text on the 3rd button to the text specified in the location object.
  üá∑üá∫ –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –Ω–∞ 3–µ–π –∫–Ω–æ–ø–∫–µ –Ω–∞ —Ç–µ–∫—Å—Ç, —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤ –æ–±—ä–µ–∫—Ç–µ location. */
  button1.onclick =
    location[
      "button functions"
    ][0]; /* üá¶üá∫ Assign the function from the button functions array of the location object to the first button.
  üá∑üá∫ –ù–∞–∑–Ω–∞—á–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –º–∞—Å—Å–∏–≤–∞ button functions –æ–±—ä–µ–∫—Ç–∞ location –Ω–∞ –ø–µ—Ä–≤—É—é –∫–Ω–æ–ø–∫—É. */
  button2.onclick =
    location[
      "button functions"
    ][1]; /* üá¶üá∫ Assign the function from the button functions array of the location object to the 2nd button.
  üá∑üá∫ –ù–∞–∑–Ω–∞—á–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –º–∞—Å—Å–∏–≤–∞ button functions –æ–±—ä–µ–∫—Ç–∞ location –Ω–∞ 2—É—é –∫–Ω–æ–ø–∫—É. */
  button3.onclick =
    location[
      "button functions"
    ][2]; /* üá¶üá∫ Assign the function from the button functions array of the location object to the 3rd button.
  üá∑üá∫ –ù–∞–∑–Ω–∞—á–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ –º–∞—Å—Å–∏–≤–∞ button functions –æ–±—ä–µ–∫—Ç–∞ location –Ω–∞ 3—å—é –∫–Ω–æ–ø–∫—É. */
  text.innerText =
    location.text; /* üá¶üá∫ Change the text in the "text" block to the text specified in the "location" object.
üá∑üá∫ –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –≤ –±–ª–æ–∫–µ text –Ω–∞ —Ç–µ–∫—Å—Ç, —É–∫–∞–∑–∞–Ω–Ω—ã–π –≤ –æ–±—ä–µ–∫—Ç–µ location. */
}

function goTown() {
  /* üá¶üá∫ This function is not generic. It is specifically related to going to the town and calls the update function with locations[0] object, which likely contains information about the town location, and updates the interface elements on the page corresponding to the new location.
üá∑üá∫ –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—â–µ–π. –û–Ω–∞ —è–≤–Ω–æ —Å–≤—è–∑–∞–Ω–∞ —Å –ø–µ—Ä–µ—Ö–æ–¥–æ–º –≤ –≥–æ—Ä–æ–¥ –∏ –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é update —Å –ø–µ—Ä–µ–¥–∞—á–µ–π –æ–±—ä–µ–∫—Ç–∞ locations[0], –∫–æ—Ç–æ—Ä—ã–π, –≤–µ—Ä–æ—è—Ç–Ω–æ, —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞, –∏ –≤—ã–∑—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –Ω–æ–≤–æ–º—É –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—é. */
  update(locations[0]); /* üá¶üá∫ Change the current location to the town.
üá∑üá∫ –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –≥–æ—Ä–æ–¥. */
}

function goStore() {
  update(locations[1]); /* üá¶üá∫ Change the current location to "Store".
  üá∑üá∫ –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ "–ú–∞–≥–∞–∑–∏–Ω". */
}

function goCave() {
  update(locations[2]); /* üá¶üá∫ Change the current location to "Cave".
üá∑üá∫ –ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ "–ü–µ—â–µ—Ä—É". */
}

function buyHealth() {
  /* üá¶üá∫ This is not a generic function. It is just a JavaScript function that checks if the player has enough gold to buy health, and depending on that either updates the amount of gold and health, or displays a message about insufficient gold.
  üá∑üá∫ –≠—Ç–æ –Ω–µ generic functions. –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞ —è–∑—ã–∫–µ JavaScript, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —É –∏–≥—Ä–æ–∫–∞ –∑–æ–ª–æ—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è, –∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —ç—Ç–æ–≥–æ –ª–∏–±–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–ª–æ—Ç–∞ –∏ –∑–¥–æ—Ä–æ–≤—å—è, –ª–∏–±–æ –≤—ã–≤–æ–¥–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç–∏ –∑–æ–ª–æ—Ç–∞. */
  if (gold >= 10) {
    /* üá¶üá∫ If the player has enough gold to buy health.
  üá∑üá∫ –ï—Å–ª–∏ —É –∏–≥—Ä–æ–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è. */
    gold -= 10; /* üá¶üá∫ Reduce gold.
  üá∑üá∫ –£–±–∞–≤–∏—Ç—å –∑–æ–ª–æ—Ç–æ. */
    health += 10; /* üá¶üá∫ Reduce gold.
  üá∑üá∫ –£–≤–µ–ª–∏—á–∏—Ç—å –∑–¥–æ—Ä–æ–≤—å–µ. */
    goldText.innerText = gold; /* üá¶üá∫ Update the text in the goldText block.
  üá∑üá∫ –û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –≤ –±–ª–æ–∫–µ goldText. */
    healthText.innerText =
      health; /* üá¶üá∫ Update the text in the healthText block.
  üá∑üá∫ –û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –≤ –±–ª–æ–∫–µ healthText. */
  } else {
    /* üá¶üá∫ If the player does not have enough gold to buy health. 
  üá∑üá∫ –ï—Å–ª–∏ —É –∏–≥—Ä–æ–∫–∞ –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è. */
    text.innerText =
      "You do not have enough gold to buy health."; /* üá¶üá∫ Display a message in the text block.
  üá∑üá∫ –í—ã–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –±–ª–æ–∫ text. */
  }
}

function buyWeapon() {
  /* üá¶üá∫ Function buyWeapon is responsible for buying weapons. If the player has enough gold to buy a weapon, they receive a new one, and it is added to their inventory. If not, an error message is displayed.
This is not a generic function. It is just a JavaScript function that is responsible for buying weapons. If the player has enough gold to buy a weapon, they receive a new one, and it is added to their inventory. If not, an error message is displayed.
üá∑üá∫ –§—É–Ω–∫—Ü–∏—è buyWeapon –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø–æ–∫—É–ø–∫—É –æ—Ä—É–∂–∏—è. –ï—Å–ª–∏ —É –∏–≥—Ä–æ–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏, –æ–Ω –ø–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤–æ–µ –æ—Ä—É–∂–∏–µ –∏ –æ–Ω–æ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –µ–≥–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å. –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ.
–≠—Ç–æ –Ω–µ generic functions. –≠—Ç–æ –ø—Ä–æ—Å—Ç–æ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞ —è–∑—ã–∫–µ JavaScript, –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø–æ–∫—É–ø–∫—É –æ—Ä—É–∂–∏—è. –ï—Å–ª–∏ —É –∏–≥—Ä–æ–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏, –æ–Ω –ø–æ–ª—É—á–∞–µ—Ç –Ω–æ–≤–æ–µ –æ—Ä—É–∂–∏–µ –∏ –æ–Ω–æ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –µ–≥–æ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å. –ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ. */
  if (currentWeapon < weapons.length - 1) {
    /* üá¶üá∫ If the player does not have the most powerful weapon.
üá∑üá∫ –ï—Å–ª–∏ —É –∏–≥—Ä–æ–∫–∞ –Ω–µ —Å–∞–º–æ–µ –º–æ—â–Ω–æ–µ –æ—Ä—É–∂–∏–µ. */
    if (gold >= 30) {
      /* üá¶üá∫ If the player has enough gold to buy a weapon.
üá∑üá∫ –ï—Å–ª–∏ —É –∏–≥—Ä–æ–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏ –æ—Ä—É–∂–∏—è. */
      gold -= 30; /* üá¶üá∫ Decrease gold.
üá∑üá∫ –£–±–∞–≤–∏—Ç—å –∑–æ–ª–æ—Ç–æ. */
      currentWeapon++; /* üá¶üá∫ Switch to the next weapon.
üá∑üá∫ –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–µ–µ –æ—Ä—É–∂–∏–µ. */
      goldText.innerText = gold; /* üá¶üá∫ Update the text in the goldText block.
üá∑üá∫ –û–±–Ω–æ–≤–∏—Ç—å —Ç–µ–∫—Å—Ç –≤ –±–ª–æ–∫–µ goldText. */
      let newWeapon =
        weapons[currentWeapon].name; /* üá¶üá∫ Remember the name of the new weapon.
üá∑üá∫ –ó–∞–ø–æ–º–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ—Ä—É–∂–∏—è. */
      text.innerText = "You now have a " + newWeapon + ".";
      inventory.push(newWeapon);
      text.innerText += " In your inventory you have: " + inventory;
    } else {
      text.innerText = "You do not have enough gold to buy a weapon.";
    }
  } else {
    text.innerText = "You already have the most powerful weapon!";
    button2.innerText = "Sell weapon for 15 gold";
    button2.onclick = sellWeapon;
  }
}

function sellWeapon() {
  /* üá¶üá∫ Function sellWeapon is responsible for selling weapons. If the player has more than one weapon in their inventory, they can sell their current weapon and receive 15 gold. Otherwise, an error message is displayed.
This is not a generic function. It is a specific function named 'sellWeapon' that is responsible for selling weapons in a game.
üá∑üá∫ –§—É–Ω–∫—Ü–∏—è sellWeapon –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø—Ä–æ–¥–∞–∂—É –æ—Ä—É–∂–∏—è. –ï—Å–ª–∏ —É –∏–≥—Ä–æ–∫–∞ –µ—Å—Ç—å –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ –æ—Ä—É–∂–∏—è –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ, —Ç–æ –æ–Ω –ø—Ä–æ–¥–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –æ—Ä—É–∂–∏–µ –∏ –ø–æ–ª—É—á–∞–µ—Ç 15 –∑–æ–ª–æ—Ç–∞. –í –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –≤—ã–≤–æ–¥–∏—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ. 
–≠—Ç–æ –Ω–µ –æ–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è. –≠—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –∏–º–µ–Ω–µ–º 'sellWeapon', –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø—Ä–æ–¥–∞–∂—É –æ—Ä—É–∂–∏—è –≤ –∏–≥—Ä–µ. */
  if (inventory.length > 1) {
    gold += 15;
    goldText.innerText = gold;
    let currentWeapon = inventory.shift();
    text.innerText = "You sold a " + currentWeapon + ".";
    text.innerText += " In your inventory you have: " + inventory;
  } else {
    text.innerText = "Don't sell your only weapon!";
  }
}

function fightSlime() {
  /* üá¶üá∫ The function fightSlime is used to select the monster that the player will fight against.
üá∑üá∫ –§—É–Ω–∫—Ü–∏—è fightSlime –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–Ω—Å—Ç—Ä–∞, –ø—Ä–æ—Ç–∏–≤ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç —Å—Ä–∞–∂–∞—Ç—å—Å—è –∏–≥—Ä–æ–∫. */
  fighting = 0;
  goFight();
}

function fightBeast() {
  /* üá¶üá∫ The function fightBeast is used to select the monster that the player will fight against.
üá∑üá∫ –§—É–Ω–∫—Ü–∏—è fightBeast –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–Ω—Å—Ç—Ä–∞, –ø—Ä–æ—Ç–∏–≤ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç —Å—Ä–∞–∂–∞—Ç—å—Å—è –∏–≥—Ä–æ–∫. */
  fighting = 1;
  goFight();
}

function fightDragon() {
  /* üá¶üá∫ The function fightDragon is used to select the monster that the player will fight against.
üá∑üá∫ –§—É–Ω–∫—Ü–∏—è fightDragon –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–Ω—Å—Ç—Ä–∞, –ø—Ä–æ—Ç–∏–≤ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—É–¥–µ—Ç —Å—Ä–∞–∂–∞—Ç—å—Å—è –∏–≥—Ä–æ–∫. */
  fighting = 2;
  goFight();
}

function goFight() {
  /* üá¶üá∫ The function goFight is executed when a monster is selected, initializes the health and statistics of the monster, and displays it in the interface.
üá∑üá∫ –§—É–Ω–∫—Ü–∏—è goFight –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –º–æ–Ω—Å—Ç—Ä–∞, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–¥–æ—Ä–æ–≤—å–µ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –º–æ–Ω—Å—Ç—Ä–∞, –∞ —Ç–∞–∫–∂–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —ç—Ç–æ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ. */
  update(locations[3]);
  monsterHealth = monsters[fighting].health;
  monsterStats.style.display = "block";
  monsterNameText.innerText = monsters[fighting].name;
  monsterHealthText.innerText = monsterHealth;
}

function attack() {
  /* üá¶üá∫ The function "attack" performs an attack on the selected monster. If the attack is successful, the player's health is reduced by the monster's attack level. Then an attack is made on the monster, and its health is reduced by the value of the player's weapon strength plus a random number between 1 and the player's level. If the player's or the monster's health is less than or equal to 0, the corresponding function is called or the player defeats the monster and moves on to the next location.
  There are no generic functions in this code. The 'attack' function is a specific function that performs an attack on the selected monster in a game.
üá∑üá∫ –§—É–Ω–∫—Ü–∏—è attack –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞—Ç–∞–∫—É –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–æ–Ω—Å—Ç—Ä–∞. –ï—Å–ª–∏ –∞—Ç–∞–∫–∞ —É—Å–ø–µ—à–Ω–∞, —Ç–æ –∑–¥–æ—Ä–æ–≤—å–µ –∏–≥—Ä–æ–∫–∞ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è –Ω–∞ —É—Ä–æ–≤–µ–Ω—å –∞—Ç–∞–∫–∏ –º–æ–Ω—Å—Ç—Ä–∞. –ó–∞—Ç–µ–º –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –∞—Ç–∞–∫–∞ –Ω–∞ –º–æ–Ω—Å—Ç—Ä–∞, –∏ –µ–≥–æ –∑–¥–æ—Ä–æ–≤—å–µ —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–∏–ª—ã –æ—Ä—É–∂–∏—è –∏–≥—Ä–æ–∫–∞ –∏ —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –º–µ–∂–¥—É 1 –∏ —É—Ä–æ–≤–Ω–µ–º –∏–≥—Ä–æ–∫–∞. –ï—Å–ª–∏ –∑–¥–æ—Ä–æ–≤—å–µ –∏–≥—Ä–æ–∫–∞ –∏–ª–∏ –º–æ–Ω—Å—Ç—Ä–∞ –º–µ–Ω—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ 0, —Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –ª–∏–±–æ –∏–≥—Ä–æ–∫ –ø–æ–±–µ–∂–¥–∞–µ—Ç –º–æ–Ω—Å—Ç—Ä–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–π –ª–æ–∫–∞—Ü–∏–∏. 
–í —ç—Ç–æ–º –∫–æ–¥–µ –Ω–µ—Ç –æ–±—â–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π. –§—É–Ω–∫—Ü–∏—è 'attack' —è–≤–ª—è–µ—Ç—Å—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞—Ç–∞–∫—É –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–æ–Ω—Å—Ç—Ä–∞ –≤ –∏–≥—Ä–µ. */
  text.innerText = "The " + monsters[fighting].name + " attacks.";
  text.innerText +=
    " You attack it with your " + weapons[currentWeapon].name + ".";

  if (isMonsterHit()) {
    health -= getMonsterAttackValue(monsters[fighting].level);
  } else {
    text.innerText += " You miss.";
  }

  monsterHealth -=
    weapons[currentWeapon].power + Math.floor(Math.random() * xp) + 1;
  healthText.innerText = health;
  monsterHealthText.innerText = monsterHealth;
  if (health <= 0) {
    lose();
  } else if (monsterHealth <= 0) {
    fighting === 2 ? winGame() : defeatMonster();
  }

  if (Math.random() <= 0.1 && inventory.length !== 1) {
    text.innerText += " Your " + inventory.pop() + " breaks.";
    currentWeapon--;
  }
}

function getMonsterAttackValue(level) {
  /* üá¶üá∫ Function declaration of getMonsterAttackValue, which takes the argument 'level' and calculates the attack value of the monster based on its level.
The getMonsterAttackValue function is generic because it can be used in different parts of the program where it is necessary to calculate the attack value of the monster based on its level.
üá∑üá∫ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ getMonsterAttackValue, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç level –∏ –≤—ã—á–∏—Å–ª—è–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ç–∞–∫–∏ –º–æ–Ω—Å—Ç—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ —É—Ä–æ–≤–Ω—è. 
–§—É–Ω–∫—Ü–∏—è getMonsterAttackValue —è–≤–ª—è–µ—Ç—Å—è –æ–±—â–µ–π (generic), —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –≤ —Ä–∞–∑–Ω—ã—Ö —á–∞—Å—Ç—è—Ö –ø—Ä–æ–≥—Ä–∞–º–º—ã, –≥–¥–µ –Ω—É–∂–Ω–æ –≤—ã—á–∏—Å–ª–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ç–∞–∫–∏ –º–æ–Ω—Å—Ç—Ä–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ–≥–æ —É—Ä–æ–≤–Ω—è. */

  let hit = level * 5 - Math.floor(Math.random() * xp);
  /* üá¶üá∫ Calculating the monster's attack value based on its level and a random number.
üá∑üá∫ –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è —É–¥–∞—Ä–∞ –º–æ–Ω—Å—Ç—Ä–∞, –∏—Å—Ö–æ–¥—è –∏–∑ —É—Ä–æ–≤–Ω—è –∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ —á–∏—Å–ª–∞. */

  console.log(hit);
  /* üá¶üá∫ Console log the value of the attack.
üá∑üá∫ –í—ã–≤–æ–¥ –≤ –∫–æ–Ω—Å–æ–ª—å –∑–Ω–∞—á–µ–Ω–∏—è —É–¥–∞—Ä–∞. */

  return hit;
  /* üá¶üá∫ Returning the value of the attack.
üá∑üá∫ –í–æ–∑–≤—Ä–∞—Ç –∑–Ω–∞—á–µ–Ω–∏—è —É–¥–∞—Ä–∞. */
}

function isMonsterHit() {
  /* üá¶üá∫ Declaring the function isMonsterHit, which returns true or false depending on whether the monster hits the player.
The given function is not a generic one as it performs a specific task - determining whether the monster hits the player, and cannot be used in other parts of the program where different tasks need to be performed.
üá∑üá∫ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ isMonsterHit, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç true –∏–ª–∏ false –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –ø–æ–ø–∞–¥–µ—Ç –ª–∏ –º–æ–Ω—Å—Ç—Ä –ø–æ –∏–≥—Ä–æ–∫—É. 
–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—â–µ–π (generic), —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–¥–∞—á—É - –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–≥–æ, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ –º–æ–Ω—Å—Ç—Ä –ø–æ –∏–≥—Ä–æ–∫—É, –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –≤ –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç—è—Ö –ø—Ä–æ–≥—Ä–∞–º–º—ã, –≥–¥–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –∑–∞–¥–∞—á. */

  return Math.random() > 0.2 || health < 20;
  /* üá¶üá∫ Declaring the function isMonsterHit, which returns true or false depending on whether the monster hits the player.
üá∑üá∫ –ú–æ–Ω—Å—Ç—Ä –ø–æ–ø–∞–¥–µ—Ç –ø–æ –∏–≥—Ä–æ–∫—É —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é 80% (–µ—Å–ª–∏ Math.random() > 0.2) –∏–ª–∏ –µ—Å–ª–∏ —É –∏–≥—Ä–æ–∫–∞ –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω—å—à–µ 20 –æ—á–∫–æ–≤ –∑–¥–æ—Ä–æ–≤—å—è. */
}

function dodge() {
  /* üá¶üá∫ Declaration of the function "dodge", which updates the game text, indicating that the player dodged the monster's attack.
This function is not generic because it performs a specific task - updating the game text, indicating that the player dodged the monster's attack, and cannot be used in other parts of the program where different tasks need to be performed.
üá∑üá∫ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ dodge, –∫–æ—Ç–æ—Ä–∞—è –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç –∏–≥—Ä—ã, —Å–æ–æ–±—â–∞—è, —á—Ç–æ –∏–≥—Ä–æ–∫ —É–≤–µ—Ä–Ω—É–ª—Å—è –æ—Ç –∞—Ç–∞–∫–∏ –º–æ–Ω—Å—Ç—Ä–∞. 
–î–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±—â–µ–π (generic), —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–¥–∞—á—É - –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –∏–≥—Ä—ã, —Å–æ–æ–±—â–∞—è, —á—Ç–æ –∏–≥—Ä–æ–∫ —É–≤–µ—Ä–Ω—É–ª—Å—è –æ—Ç –∞—Ç–∞–∫–∏ –º–æ–Ω—Å—Ç—Ä–∞, –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –≤ –¥—Ä—É–≥–∏—Ö —á–∞—Å—Ç—è—Ö –ø—Ä–æ–≥—Ä–∞–º–º—ã, –≥–¥–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö –∑–∞–¥–∞—á. */

  text.innerText =
    "You dodge the attack from the " + monsters[fighting].name + ".";
  /* üá¶üá∫ Updating text in the element with id 'text'.
üá∑üá∫ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ —ç–ª–µ–º–µ–Ω—Ç–µ —Å id "text". */
}

function defeatMonster() {
  /* üá¶üá∫ Declaring the function defeatMonster, which updates the player's gold and experience points after defeating a monster, and also calls the update function to update the player's location.
  This is not a generic function as it performs specific tasks related to updating the player's gold and experience points after defeating a monster and updating the player's location.
üá∑üá∫ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ defeatMonster, –∫–æ—Ç–æ—Ä–∞—è –æ–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–ª–æ—Ç–∞ –∏ –æ–ø—ã—Ç–∞ –∏–≥—Ä–æ–∫–∞ –ø–æ—Å–ª–µ —É–±–∏–π—Å—Ç–≤–∞ –º–æ–Ω—Å—Ç—Ä–∞, –∞ —Ç–∞–∫–∂–µ –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é update –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞. 
–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ–±–æ–±—â–µ–Ω–Ω–æ–π, –ø–æ—Å–∫–æ–ª—å–∫—É –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∑–∞–¥–∞—á–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–æ–ª–æ—Ç–∞ –∏ –æ–ø—ã—Ç–∞ –∏–≥—Ä–æ–∫–∞ –ø–æ—Å–ª–µ —É–±–∏–π—Å—Ç–≤–∞ –º–æ–Ω—Å—Ç—Ä–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞. */

  gold += Math.floor(
    monsters[fighting].level * 6.7
  ); /* üá¶üá∫ Increasing the player's gold by a value dependent on the level of the defeated monster.
üá∑üá∫ –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∑–æ–ª–æ—Ç–∞ –∏–≥—Ä–æ–∫–∞ –Ω–∞ –∑–Ω–∞—á–µ–Ω–∏–µ, –∑–∞–≤–∏—Å—è—â–µ–µ –æ—Ç —É—Ä–æ–≤–Ω—è —É–±–∏—Ç–æ–≥–æ –º–æ–Ω—Å—Ç—Ä–∞. */

  xp +=
    monsters[fighting]
      .level; /* üá¶üá∫ Increasing the player's experience by the level of the defeated monster.
üá∑üá∫ –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –æ–ø—ã—Ç–∞ –∏–≥—Ä–æ–∫–∞ –Ω–∞ —É—Ä–æ–≤–µ–Ω—å —É–±–∏—Ç–æ–≥–æ –º–æ–Ω—Å—Ç—Ä–∞. */

  goldText.innerText =
    gold; /* üá¶üá∫ Updating the text in the element with id "goldText" with the new amount of gold.
üá∑üá∫ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ —ç–ª–µ–º–µ–Ω—Ç–µ —Å id "goldText" —Å –Ω–æ–≤—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–æ–ª–æ—Ç–∞. */

  xpText.innerText =
    xp; /* üá¶üá∫ Updating the text in the element with id "xpText" with the new amount of experience.
üá∑üá∫ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≤ —ç–ª–µ–º–µ–Ω—Ç–µ —Å id "xpText" —Å –Ω–æ–≤—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ–ø—ã—Ç–∞. */

  update(
    locations[4]
  ); /* üá¶üá∫ Updating player's location by calling the update function with a new location.
üá∑üá∫ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞, –≤—ã–∑—ã–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—é update —Å –Ω–æ–≤—ã–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º. */
}

function lose() {
  /* üá¶üá∫ Declaration of the function lose, which calls the update function with the location corresponding to the player's loss.
  This is a generic function as it performs common tasks such as updating the player's location using the update function with specific locations depending on whether the player won or lost.
üá∑üá∫ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ lose, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é update —Å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –ø—Ä–æ–∏–≥—Ä—ã—à—É.
–≠—Ç–æ –æ–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –ø–æ—Å–∫–æ–ª—å–∫—É –æ–Ω–∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –æ–±—â–∏–µ –∑–∞–¥–∞—á–∏, —Ç–∞–∫–∏–µ –∫–∞–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞, –∏—Å–ø–æ–ª—å–∑—É—è —Ñ—É–Ω–∫—Ü–∏—é update —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–º–∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è–º–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –≤—ã–∏–≥—Ä–∞–ª –ª–∏ –∏–≥—Ä–æ–∫ –∏–ª–∏ –ø—Ä–æ–∏–≥—Ä–∞–ª. */

  update(locations[5]);
  /* üá¶üá∫ Updating the player's location by calling the update function with a new location.
üá∑üá∫ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞, –≤—ã–∑—ã–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—é update —Å –Ω–æ–≤—ã–º –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º. */
}

function winGame() {
  /* üá¶üá∫ Declaring the function winGame, which calls the update function with the location corresponding to winning the game.
üá∑üá∫ –û–±—ä—è–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ winGame, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é update —Å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º –ø–æ–±–µ–¥–µ –≤ –∏–≥—Ä–µ. */
  update(locations[6]);
}

function restart() {
  xp = 0; // üá¶üá∫ Reset experience points to 0
  health = 100; // üá¶üá∫ Reset health to 100
  gold = 50; // üá¶üá∫ Reset gold to 50
  currentWeapon = 0; // üá¶üá∫ Reset current weapon to 0
  inventory = ["stick"]; // üá¶üá∫ Reset inventory to contain only a stick
  goldText.innerText = gold; // üá¶üá∫ Update the gold text element to display the current value of gold
  healthText.innerText = health; // üá¶üá∫ Update the health text element to display the current value of health
  xpText.innerText = xp; // üá¶üá∫ Update the experience points text element to display the current value of xp
  goTown(); // üá¶üá∫ Call the goTown() function to navigate to the town location
}

function easterEgg() {
  update(locations[7]); // üá¶üá∫ Call the update() function with the location at index 7 to display an Easter egg
}

function pickTwo() {
  pick(2); // üá¶üá∫ Call the pick() function with the argument 2 to play the "Pick Two" game
}

function pickEight() {
  pick(8); // üá¶üá∫ Call the pick() function with the argument 8 to play the "Pick Eight" game
}

function pick(guess) {
  let numbers = []; // üá¶üá∫ Initialize an empty array to hold the random numbers
  while (numbers.length < 10) {
    // üá¶üá∫ Generate 10 random numbers between 0 and 10
    numbers.push(Math.floor(Math.random() * 11));
  }

  text.innerText = "You picked " + guess + ". Here are the random numbers:\n"; // üá¶üá∫ Update the text element to display the user's guess and the random numbers

  for (let i = 0; i < 10; i++) {
    // üá¶üá∫ Loop through the random numbers and add them to the text element
    text.innerText += numbers[i] + "\n";
  }

  if (numbers.indexOf(guess) !== -1) {
    // üá¶üá∫ If the user's guess is in the array of random numbers
    text.innerText += "Right! You win 20 gold!"; // üá¶üá∫ Update the text element to indicate the user won and award 20 gold
    gold += 20;
    goldText.innerText = gold; // üá¶üá∫ Update the gold text element to display the new value of gold
  } else {
    // üá¶üá∫ If the user's guess is not in the array of random numbers
    text.innerText += "Wrong! You lose 10 health!"; // üá¶üá∫ Update the text element to indicate the user lost and subtract 10 from health
    health -= 10;
    healthText.innerText = health; // üá¶üá∫ Update the health text element to display the new value of health
    if (health <= 0) {
      // üá¶üá∫ If health is less than or equal to 0, the user has lost the game
      lose(); // üá¶üá∫ Call the lose() function to end the game
    }
  }
}
